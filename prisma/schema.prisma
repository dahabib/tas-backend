generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String
  role         RoleType @default(user)
  contactNo    String   @map("contact_no")
  address      String
  profileImage String   @map("profile_image")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("users")
}

enum RoleType {
  super_admin
  admin
  partner
  user
}

model Region {
  id           String        @id @default(uuid())
  regionName   String        @map("region_name")
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime      @updatedAt @map("updated_at") @db.Timestamptz()
  regionImages Json[]        @map("region_images")
  cities       City[]
  tourists     Tourist[]
  partners     Partner[]
  destinations Destination[]

  @@map("regions")
}

model City {
  id           String        @id @default(uuid())
  cityName     String        @map("city_name")
  cityImages   Json[]        @map("city_images")
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime      @updatedAt @map("updated_at") @db.Timestamptz()
  regionId     String
  region       Region        @relation(fields: [regionId], references: [id])
  tourists     Tourist[]
  partners     Partner[]
  destinations Destination[]

  @@map("cities")
}

model Destination {
  id                String          @id @default(uuid())
  name              String
  location          String
  longitude         Float
  latitude          Float
  regionId          String          @map("region_id")
  region            Region          @relation(fields: [regionId], references: [id])
  cityId            String          @map("city_id")
  city              City            @relation(fields: [cityId], references: [id])
  destinationImages Json[]          @map("destination_images")
  createdAt         DateTime        @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt         DateTime        @updatedAt @map("updated_at") @db.Timestamptz()
  availableDates    AvailableDate[]
  tourPackages      TourPackage[]
  tourItineraries   TourItinerary[]
  attractions       Attraction[]

  @@map("destinations")
}

model Attraction {
  id            String      @id @default(uuid())
  title         String
  destinationId String      @map("destination_id")
  destination   Destination @relation(fields: [destinationId], references: [id])

  @@map("attractions")
}

model AvailableDate {
  id            String      @id @default(uuid())
  destinationId String      @map("destination_id")
  destination   Destination @relation(fields: [destinationId], references: [id])
  date          DateTime
  capacity      Int
  duration      Int
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt     DateTime    @updatedAt @map("updated_at") @db.Timestamptz()

  @@index([destinationId, date], name: "available_dates")
}

model Tourist {
  id                     String                  @id @default(uuid())
  touristId              String                  @map("tourist_id")
  firstName              String                  @map("first_name")
  middleName             String?                 @map("middle_name")
  lastName               String?                 @map("last_name")
  profileImage           String?                 @map("profile_image")
  contactNo              String                  @map("contact_no")
  gender                 String
  bloodGroup             String                  @map("blood_group")
  emergencyContactNo     String                  @map("emergency_contact_no")
  createdAt              DateTime                @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt              DateTime                @updatedAt @map("updated_at") @db.Timestamptz()
  cityId                 String                  @map("city_id")
  city                   City                    @relation(fields: [cityId], references: [id])
  region                 Region                  @relation(fields: [regionId], references: [id])
  regionId               String
  touristPackageBookings TouristPackageBooking[]
  tourPayments           TourPayment[]
  touristBookedTours     TouristBookedTour[]
  touristReviews         TouristReview[]

  @@map("tourists")
}

model Partner {
  id              String          @id @default(uuid())
  partnerId       String          @map("partner_id")
  partnerType     PartnerType     @map("partner_type")
  firstName       String          @map("first_name")
  middleName      String?         @map("middle_name")
  lastName        String?         @map("last_name")
  profileImage    String          @map("profile_image")
  contactNo       String
  gender          String
  designation     String
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt       DateTime        @updatedAt @map("updated_at") @db.Timestamptz()
  city            City            @relation(fields: [cityId], references: [id])
  cityId          String          @map("city_id")
  region          Region          @relation(fields: [regionId], references: [id])
  regionId        String          @map("region_id")
  tourPartners    TourPartner[]
  tourItineraries TourItinerary[]

  @@map("partners")
}

enum PartnerType {
  GUIDE
  TRANSPORT
  ACOMODATION
}

model TourPartner {
  tourPackageId String      @map("tour_package_id")
  tourPackage   TourPackage @relation(fields: [tourPackageId], references: [id])
  partnerId     String      @map("partner_id")
  partner       Partner     @relation(fields: [partnerId], references: [id])

  @@id([tourPackageId, partnerId])
  @@map("tour_partners")
}

model TourType {
  id           String        @id @default(uuid())
  title        String
  description  String?
  maxCapacity  Int           @default(0) @map("max_capacity")
  tourDuration Int           @default(0) @map("tour_duratin")
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime      @updatedAt @map("updated_at") @db.Timestamptz()
  tourPackages TourPackage[]

  @@map("tour_types")
}

model TourCategory {
  id              String          @id @default(uuid())
  title           String
  description     String?
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt       DateTime        @updatedAt @map("updated_at") @db.Timestamptz()
  tourPackages    TourPackage[]
  tourItineraries TourItinerary[]

  @@map("tour_categories")
}

model TourPackage {
  id                     String                    @id @default(uuid())
  destinationId          String                    @map("destination_id")
  destination            Destination               @relation(fields: [destinationId], references: [id])
  tourTypeId             String                    @map("tour_type_id")
  tourType               TourType                  @relation(fields: [tourTypeId], references: [id])
  tourCategoryId         String                    @map("tour_category_id")
  tourCategory           TourCategory              @relation(fields: [tourCategoryId], references: [id])
  tourBudget             Int                       @default(0) @map("tour_budget")
  createdAt              DateTime                  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt              DateTime                  @updatedAt @map("updated_at") @db.Timestamptz()
  status                 PackageAvailabilityStatus
  tourPartners           TourPartner[]
  tourItinerarys         TourItinerary[]
  touristPackageBookings TouristPackageBooking[]
  tourPayments           TourPayment[]
  touristBookedTours     TouristBookedTour[]

  @@map("tour_packages")
}

enum PackageAvailabilityStatus {
  UPCOMING
  ONGOING
  COMPLETED
}

model TourItinerary {
  id             String       @id @default(uuid())
  title          String
  description    String?
  startTime      String       @map("start_time")
  endTime        String?      @map("end_time")
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt      DateTime     @updatedAt @map("updated_at") @db.Timestamptz()
  tourCategoryId String       @map("tour_category_id")
  tourCategory   TourCategory @relation(fields: [tourCategoryId], references: [id])
  destinationId  String       @map("destination_id")
  destination    Destination  @relation(fields: [destinationId], references: [id])
  tourPackage    TourPackage? @relation(fields: [tourPackageId], references: [id])
  tourPackageId  String?      @map("tour_package_id")
  partner        Partner?     @relation(fields: [partnerId], references: [id])
  partnerId      String?

  @@map("tour_itinerary")
}

model TouristPackageBooking {
  id            String      @id @default(uuid())
  isConfirmed   Boolean?    @default(false) @map("is_confirmed")
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt     DateTime    @updatedAt @map("updated_at") @db.Timestamptz()
  tourPackageId String      @map("tour_package_id")
  tourPackage   TourPackage @relation(fields: [tourPackageId], references: [id])
  touristId     String      @map("tourist_id")
  tourist       Tourist     @relation(fields: [touristId], references: [id])

  @@map("tourist_package_bookings")
}

model TourPayment {
  id                   String         @id @default(uuid())
  touristId            String         @map("tourist_id")
  tourist              Tourist        @relation(fields: [touristId], references: [id])
  tourPackageId        String         @map("tour_package_id")
  tourPackage          TourPackage    @relation(fields: [tourPackageId], references: [id])
  fullPaymentAmount    Int?           @default(0) @map("full_payment_amount")
  upfrontPaymentAmount Int?           @default(0) @map("upfront_payment_amount")
  totalDueAmount       Int?           @default(0) @map("total_due_amount")
  totalPaidAmount      Int?           @default(0) @map("total_paid_amount")
  paymentStatus        PaymentStatus? @default(PENDING) @map("payment_status")
  createdAt            DateTime       @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt            DateTime       @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("tour_payments")
}

enum PaymentStatus {
  PENDING
  UPFRONT_PAID
  FULL_PAID
}

model TouristBookedTour {
  id             String                   @id @default(uuid())
  touristId      String                   @map("tourist_id")
  tourist        Tourist                  @relation(fields: [touristId], references: [id])
  status         TouristBookedTourStatus? @default(PENDING)
  tourPackageId  String                   @map("tour_package_id")
  tourPackage    TourPackage              @relation(fields: [tourPackageId], references: [id])
  createdAt      DateTime                 @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt      DateTime                 @updatedAt @map("updated_at") @db.Timestamptz()
  touristReviews TouristReview[]

  @@map("tourist_booked_tours")
}

enum TouristBookedTourStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model TouristReview {
  id                  String            @id @default(uuid())
  touristId           String            @map("tourist_id")
  tourist             Tourist           @relation(fields: [touristId], references: [id])
  touristBookedTourId String            @map("tourist_booked_tour_id")
  touristBookedTour   TouristBookedTour @relation(fields: [touristBookedTourId], references: [id])
  comment             String
  rating              String
  createdAt           DateTime          @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt           DateTime          @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("tourist_reviews")
}
